// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  SUPER_ADMIN
}

model Customer {
  customer_id Int    @id
  address     String
  private_key String

  first_name  String?
  middle_name String?
  last_name   String?
  phone       String?
  email       String?
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  balances    UserAssetBalance[]
  withdrawals WithdrawRequest[]

  sender_transactions   Transaction[] @relation("tx_sender")
  receiver_transactions Transaction[] @relation("tx_receiver")

  @@map("customers")
}

enum Asset {
  ESOM
  SOM
  BTC
  ETH
  USDT_TRC20
}

enum WithdrawStatus {
  PENDING
  SUBMITTED
  SUCCESS
  FAILED
}

enum TransactionKind {
  BANK_TO_BANK
  BANK_TO_WALLET
  WALLET_TO_BANK
  WALLET_TO_WALLET
  CONVERSION
  WITHDRAW_CRYPTO
}

enum TransactionStatus {
  PENDING
  SUCCESS
  REJECTED
  FAILED
}

enum AntiFraudRuleKey {
  FIAT_ANY_GE_1M
  ONE_TIME_GE_8M
  FREQUENT_OPS_3_30D_EACH_GE_100K
  WITHDRAW_AFTER_LARGE_INFLOW
  SPLITTING_TOTAL_14D_GE_1M
  THIRD_PARTY_DEPOSITS_3_30D_TOTAL_GE_1M
  AFTER_INACTIVITY_6M
  MANY_SENDERS_TO_ONE_10_PER_MONTH
}

enum AntiFraudCaseStatus {
  OPEN
  APPROVED
  REJECTED
}

model AntiFraudRule {
  id                Int              @id @default(autoincrement())
  key               AntiFraudRuleKey @unique
  enabled           Boolean          @default(true)
  period_days       Int?
  threshold_som     Decimal?         @db.Decimal(38, 18)
  min_count         Int?
  percent_threshold Decimal?         @db.Decimal(5, 2)
  updatedAt         DateTime         @updatedAt

  @@map("antifraud_rules")
}

model AntiFraudCase {
  id             Int                 @id @default(autoincrement())
  transaction_id Int                 @unique
  rule_key       AntiFraudRuleKey
  status         AntiFraudCaseStatus @default(OPEN)
  reason         String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id])

  @@map("antifraud_cases")
}

model Settings {
  id                          Int     @id @default(1)
  esom_per_usd                Decimal @db.Decimal(38, 18)
  esom_som_conversion_fee_pct Decimal @db.Decimal(5, 2)

  btc_trade_fee_pct  Decimal @db.Decimal(5, 2)
  eth_trade_fee_pct  Decimal @db.Decimal(5, 2)
  usdt_trade_fee_pct Decimal @db.Decimal(5, 2)

  btc_withdraw_fee_fixed  Decimal @db.Decimal(38, 18)
  eth_withdraw_fee_fixed  Decimal @db.Decimal(38, 18)
  usdt_withdraw_fee_fixed Decimal @db.Decimal(38, 18)

  min_withdraw_btc        Decimal @db.Decimal(38, 18)
  min_withdraw_eth        Decimal @db.Decimal(38, 18)
  min_withdraw_usdt_trc20 Decimal @db.Decimal(38, 18)

  updatedAt DateTime @updatedAt

  @@map("settings")
}

model UserAssetBalance {
  id          Int      @id @default(autoincrement())
  customer_id Int
  asset       Asset
  balance     Decimal  @default(0) @db.Decimal(38, 18)
  updatedAt   DateTime @updatedAt

  customer Customer @relation(fields: [customer_id], references: [customer_id])

  @@unique([customer_id, asset])
  @@map("user_asset_balances")
}

model Transaction {
  id     Int               @id @default(autoincrement())
  kind   TransactionKind
  status TransactionStatus @default(PENDING)

  amount_in  Decimal @db.Decimal(38, 18)
  asset_in   Asset
  amount_out Decimal @db.Decimal(38, 18)
  asset_out  Asset

  fee_amount   Decimal? @db.Decimal(38, 18) // optional fee in same asset units
  price_usd    Decimal? @db.Decimal(38, 18) // unit price in USD when applicable
  notional_usd Decimal? @db.Decimal(38, 18) // optional notional in USD for conversions/trades

  tx_hash    String?
  bank_op_id Int?

  sender_customer_id      Int?
  receiver_customer_id    Int?
  sender_wallet_address   String?
  receiver_wallet_address String?
  external_address        String?

  comment   String?
  createdAt DateTime @default(now())

  sender_customer   Customer?      @relation("tx_sender", fields: [sender_customer_id], references: [customer_id])
  receiver_customer Customer?      @relation("tx_receiver", fields: [receiver_customer_id], references: [customer_id])
  anti_fraud_case   AntiFraudCase?

  @@index([kind])
  @@index([status])
  @@index([createdAt])
  @@index([sender_customer_id])
  @@index([receiver_customer_id])
  @@map("transactions")
}

model WithdrawRequest {
  id          Int            @id @default(autoincrement())
  customer_id Int
  asset       Asset
  address     String
  amount      Decimal        @db.Decimal(38, 18)
  fee         Decimal        @db.Decimal(38, 18)
  txid        String?
  status      WithdrawStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  customer Customer @relation(fields: [customer_id], references: [customer_id])

  @@map("withdraw_requests")
}

model Admin {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  role          AdminRole @default(SUPER_ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("admins")
}

enum UserStatus {
  ACTIVE
  FRAUD
  BLOCKED
}
